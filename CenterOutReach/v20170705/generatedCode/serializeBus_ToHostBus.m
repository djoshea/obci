function [out, valid] = serializeBus_ToHostBus(bus, namePrefix)
%#codegen
% DO NOT EDIT: Auto-generated by 
%   BusSerialize.writeSerializeBusCode('ToHostBus')

    if nargin < 2, namePrefix = uint8(''); end
    namePrefixBytes = uint8(namePrefix(:))';
    valid = uint8(0);
    coder.varsize('out', 9193 + 174*numel(namePrefix));
    outSize = getSerializedBusLength_ToHostBus(bus, namePrefix);
    assert(outSize <= 9193 + 174*numel(namePrefix));
    out = zeros(outSize, 1, 'uint8');
    offset = uint32(1);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize nested RigConfigBus bus field rigConfig
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % rigConfig nested bus element(1)
    subNamePrefix = uint8([namePrefixBytes, uint8('rigConfig'), uint8('_')]);
    nestedBytes = uint32(getSerializedBusLength_RigConfigBus(bus.rigConfig(1), subNamePrefix));
    out(offset:(offset+nestedBytes-uint32(1))) = serializeBus_RigConfigBus(bus.rigConfig(1), subNamePrefix);
    offset = offset + nestedBytes; 

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized clock
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Check input size is valid
    assert(numel(bus.clock) == 1, 'numel(bus.clock) must be 1');    % clock bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(2);
    offset = offset + uint32(1);

    % clock signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(5);
    offset = offset + uint32(1);

    % clock name with prefix 
    if(offset+uint32(2+5 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(numel(namePrefixBytes) + 5), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(numel(namePrefixBytes) + 5-1))) = [namePrefixBytes, uint8('clock')];
    offset = offset + uint32(numel(namePrefixBytes) + 5);

    % clock units
    if(offset+uint32(2+2 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(2), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(2-1))) = uint8('ms');
    offset = offset + uint32(2);

    % clock data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(7); % data type is uint32
    offset = offset + uint32(1);

    % clock dimensions
    if(offset > numel(out)), return, end
    if(offset+uint32(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);
    out(offset:(offset+uint32(2*1-1))) = typecast(uint16(numel(bus.clock)), 'uint8');
    offset = offset + uint32(2*1);

    % clock data
    nBytes = uint32(4 * numel(bus.clock));
    if nBytes > uint32(0)
        if(offset+uint32(nBytes-1) > numel(out)), return, end
        out(offset:(offset+uint32(nBytes-1))) = typecast(uint32(bus.clock(:))', 'uint8')';
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize nested MicroscopeStateBus bus field scopeState
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % scopeState nested bus element(1)
    subNamePrefix = uint8([namePrefixBytes, uint8('scopeState'), uint8('_')]);
    nestedBytes = uint32(getSerializedBusLength_MicroscopeStateBus(bus.scopeState(1), subNamePrefix));
    out(offset:(offset+nestedBytes-uint32(1))) = serializeBus_MicroscopeStateBus(bus.scopeState(1), subNamePrefix);
    offset = offset + nestedBytes; 

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized juiceRelease
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Check input size is valid
    assert(numel(bus.juiceRelease) == 1, 'numel(bus.juiceRelease) must be 1');    % juiceRelease bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(2);
    offset = offset + uint32(1);

    % juiceRelease signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(4);
    offset = offset + uint32(1);

    % juiceRelease name with prefix 
    if(offset+uint32(2+12 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(numel(namePrefixBytes) + 12), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(numel(namePrefixBytes) + 12-1))) = [namePrefixBytes, uint8('juiceRelease')];
    offset = offset + uint32(numel(namePrefixBytes) + 12);

    % juiceRelease units
    if(offset+uint32(2+0 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(0), 'uint8');
    offset = offset + uint32(2);

    % juiceRelease data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(3); % data type is uint8
    offset = offset + uint32(1);

    % juiceRelease dimensions
    if(offset > numel(out)), return, end
    if(offset+uint32(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);
    out(offset:(offset+uint32(2*1-1))) = typecast(uint16(numel(bus.juiceRelease)), 'uint8');
    offset = offset + uint32(2*1);

    % juiceRelease data
    nBytes = uint32(1 * numel(bus.juiceRelease));
    if nBytes > uint32(0)
        if(offset+uint32(nBytes-1) > numel(out)), return, end
        out(offset:(offset+uint32(nBytes-1))) = uint8(bus.juiceRelease(:));
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize nested HandOutputBus bus field hand
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % hand nested bus element(1)
    subNamePrefix = uint8([namePrefixBytes, uint8('hand'), uint8('_')]);
    nestedBytes = uint32(getSerializedBusLength_HandOutputBus(bus.hand(1), subNamePrefix));
    out(offset:(offset+nestedBytes-uint32(1))) = serializeBus_HandOutputBus(bus.hand(1), subNamePrefix);
    offset = offset + nestedBytes; 

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize nested EyeOutputBus bus field eye
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % eye nested bus element(1)
    subNamePrefix = uint8([namePrefixBytes, uint8('eye'), uint8('_')]);
    nestedBytes = uint32(getSerializedBusLength_EyeOutputBus(bus.eye(1), subNamePrefix));
    out(offset:(offset+nestedBytes-uint32(1))) = serializeBus_EyeOutputBus(bus.eye(1), subNamePrefix);
    offset = offset + nestedBytes; 

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize nested AnalogOutputBus bus field analog
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % analog nested bus element(1)
    subNamePrefix = uint8([namePrefixBytes, uint8('analog'), uint8('_')]);
    nestedBytes = uint32(getSerializedBusLength_AnalogOutputBus(bus.analog(1), subNamePrefix));
    out(offset:(offset+nestedBytes-uint32(1))) = serializeBus_AnalogOutputBus(bus.analog(1), subNamePrefix);
    offset = offset + nestedBytes; 

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize nested TrialDataOutputBus bus field trialData
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % trialData nested bus element(1)
    subNamePrefix = uint8([namePrefixBytes, uint8('trialData'), uint8('_')]);
    nestedBytes = uint32(getSerializedBusLength_TrialDataOutputBus(bus.trialData(1), subNamePrefix));
    out(offset:(offset+nestedBytes-uint32(1))) = serializeBus_TrialDataOutputBus(bus.trialData(1), subNamePrefix);
    offset = offset + nestedBytes; 

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize nested ConditionBus bus field condition
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % condition nested bus element(1)
    subNamePrefix = uint8([namePrefixBytes, uint8('condition'), uint8('_')]);
    nestedBytes = uint32(getSerializedBusLength_ConditionBus(bus.condition(1), subNamePrefix));
    out(offset:(offset+nestedBytes-uint32(1))) = serializeBus_ConditionBus(bus.condition(1), subNamePrefix);
    offset = offset + nestedBytes; 

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize nested TaskControlBus bus field taskControl
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % taskControl nested bus element(1)
    subNamePrefix = uint8([namePrefixBytes, uint8('taskControl'), uint8('_')]);
    nestedBytes = uint32(getSerializedBusLength_TaskControlBus(bus.taskControl(1), subNamePrefix));
    out(offset:(offset+nestedBytes-uint32(1))) = serializeBus_TaskControlBus(bus.taskControl(1), subNamePrefix);
    offset = offset + nestedBytes; 

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize nested ParamBus bus field param
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % param nested bus element(1)
    subNamePrefix = uint8([namePrefixBytes, uint8('param'), uint8('_')]);
    nestedBytes = uint32(getSerializedBusLength_ParamBus(bus.param(1), subNamePrefix));
    out(offset:(offset+nestedBytes-uint32(1))) = serializeBus_ParamBus(bus.param(1), subNamePrefix);
    offset = offset + nestedBytes; 

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize nested DataLoggerInfoBus bus field dataLoggerInfo
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % dataLoggerInfo nested bus element(1)
    subNamePrefix = uint8([namePrefixBytes, uint8('dataLoggerInfo'), uint8('_')]);
    nestedBytes = uint32(getSerializedBusLength_DataLoggerInfoBus(bus.dataLoggerInfo(1), subNamePrefix));
    out(offset:(offset+nestedBytes-uint32(1))) = serializeBus_DataLoggerInfoBus(bus.dataLoggerInfo(1), subNamePrefix);
    offset = offset + nestedBytes; 

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized trialId
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Check input size is valid
    assert(numel(bus.trialId) == 1, 'numel(bus.trialId) must be 1');    % trialId bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(2);
    offset = offset + uint32(1);

    % trialId signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(4);
    offset = offset + uint32(1);

    % trialId name with prefix 
    if(offset+uint32(2+7 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(numel(namePrefixBytes) + 7), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(numel(namePrefixBytes) + 7-1))) = [namePrefixBytes, uint8('trialId')];
    offset = offset + uint32(numel(namePrefixBytes) + 7);

    % trialId units
    if(offset+uint32(2+0 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(0), 'uint8');
    offset = offset + uint32(2);

    % trialId data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(7); % data type is uint32
    offset = offset + uint32(1);

    % trialId dimensions
    if(offset > numel(out)), return, end
    if(offset+uint32(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);
    out(offset:(offset+uint32(2*1-1))) = typecast(uint16(numel(bus.trialId)), 'uint8');
    offset = offset + uint32(2*1);

    % trialId data
    nBytes = uint32(4 * numel(bus.trialId));
    if nBytes > uint32(0)
        if(offset+uint32(nBytes-1) > numel(out)), return, end
        out(offset:(offset+uint32(nBytes-1))) = typecast(uint32(bus.trialId(:))', 'uint8')';
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize nested TaskStatisticsBus bus field taskStatistics
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % taskStatistics nested bus element(1)
    subNamePrefix = uint8([namePrefixBytes, uint8('taskStatistics'), uint8('_')]);
    nestedBytes = uint32(getSerializedBusLength_TaskStatisticsBus(bus.taskStatistics(1), subNamePrefix));
    out(offset:(offset+nestedBytes-uint32(1))) = serializeBus_TaskStatisticsBus(bus.taskStatistics(1), subNamePrefix);
    offset = offset + nestedBytes; 

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize variable-sized taskEventBuffer
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Check input size is valid
    assert(numel(bus.taskEventBuffer) <= 50, 'numel(bus.taskEventBuffer) exceeds max size of 50');    % taskEventBuffer bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);

    % taskEventBuffer signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(5);
    offset = offset + uint32(1);

    % taskEventBuffer name with prefix 
    if(offset+uint32(2+15 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(numel(namePrefixBytes) + 15), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(numel(namePrefixBytes) + 15-1))) = [namePrefixBytes, uint8('taskEventBuffer')];
    offset = offset + uint32(numel(namePrefixBytes) + 15);

    % taskEventBuffer units
    if(offset+uint32(2+4 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(4), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(4-1))) = uint8('enum');
    offset = offset + uint32(4);

    % taskEventBuffer data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(8); % data type is TaskEvent
    offset = offset + uint32(1);

    % taskEventBuffer dimensions
    if(offset > numel(out)), return, end
    if(offset+uint32(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);
    % converting enum type TaskEvent to string
    coder.varsize('enumAsStr_taskEventBuffer', (27+1)*50 - 1); % create enough room for the max number of strings plus semicolons
    enumAsStr_taskEventBuffer = zeros(0, 1, 'uint8');
    for iEnum = 1:numel(bus.taskEventBuffer)
        enumAsStr_taskEventBuffer = [enumAsStr_taskEventBuffer; uint8(enumToString_TaskEvent(bus.taskEventBuffer(iEnum)))']; %#ok<AGROW>
        if iEnum < numel(bus.taskEventBuffer)
            enumAsStr_taskEventBuffer = [enumAsStr_taskEventBuffer; uint8(';')]; %#ok<AGROW>
        end
    end
    out(offset:(offset+uint32(2*1-1))) = typecast(uint16(numel(enumAsStr_taskEventBuffer)), 'uint8');
    offset = offset + uint32(2*1);

    % taskEventBuffer data
    nBytes = uint32(numel(enumAsStr_taskEventBuffer));
    if nBytes > uint32(0)
        if(offset+uint32(nBytes-1) > numel(out)), return, end
        out(offset:(offset+uint32(nBytes-1))) = uint8(enumAsStr_taskEventBuffer(:));
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize variable-sized taskEventTimes
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Check input size is valid
    assert(numel(bus.taskEventTimes) <= 50, 'numel(bus.taskEventTimes) exceeds max size of 50');    % taskEventTimes bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(3);
    offset = offset + uint32(1);

    % taskEventTimes signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(5);
    offset = offset + uint32(1);

    % taskEventTimes name with prefix 
    if(offset+uint32(2+14 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(numel(namePrefixBytes) + 14), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(numel(namePrefixBytes) + 14-1))) = [namePrefixBytes, uint8('taskEventTimes')];
    offset = offset + uint32(numel(namePrefixBytes) + 14);

    % taskEventTimes units
    if(offset+uint32(2+2 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(2), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(2-1))) = uint8('ms');
    offset = offset + uint32(2);

    % taskEventTimes data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(7); % data type is uint32
    offset = offset + uint32(1);

    % taskEventTimes dimensions
    if(offset > numel(out)), return, end
    if(offset+uint32(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);
    out(offset:(offset+uint32(2*1-1))) = typecast(uint16(numel(bus.taskEventTimes)), 'uint8');
    offset = offset + uint32(2*1);

    % taskEventTimes data
    nBytes = uint32(4 * numel(bus.taskEventTimes));
    if nBytes > uint32(0)
        if(offset+uint32(nBytes-1) > numel(out)), return, end
        out(offset:(offset+uint32(nBytes-1))) = typecast(uint32(bus.taskEventTimes(:))', 'uint8')';
    end
    offset = offset + nBytes; %#ok<NASGU>

    valid = uint8(1);
end