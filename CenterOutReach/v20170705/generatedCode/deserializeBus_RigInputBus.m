function [bus, valid, offset] = deserializeBus_RigInputBus(input, offset, valid, namePrefix)
%#codegen
% DO NOT EDIT: Auto-generated by 
%   BusSerialize.writeDeserializeBusCode('RigInputBus')

    in = typecast(input, 'uint8');
    if nargin < 2
         offset = uint32(1);
    end
    if nargin < 3
         valid = uint8(1);
    end
    if nargin < 4
        namePrefix = uint8('');
    end
    offset = uint32(offset);

    bus = initializeBus_RigInputBus();
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-size field rigConfig as nested Bus: RigConfigBus
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % deserialize each bus element within
    subNamePrefix = uint8([namePrefix, 'rigConfig_']);
    [bus.rigConfig, valid, offset] = deserializeBus_RigConfigBus(in, offset, valid, subNamePrefix);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-sized field clock
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Checking header
    if valid == uint8(0) || offset + uint32(15 + numel(namePrefix) - 1) > numel(in)
        valid = uint8(0);
    end
    expectedHeader_clock = uint8([2, 5, typecast(uint16(numel(namePrefix) + 5), 'uint8'), namePrefix, 'clock', typecast(uint16(2), 'uint8'), 'ms', 7, 1])';
    for headerOffset = 1:uint32(15+numel(namePrefix)-1)
        valid = uint8(valid && in(offset+headerOffset-1) == expectedHeader_clock(headerOffset));
    end
    offset = offset + uint32(15 + numel(namePrefix));

    % Establishing size
    if valid == uint8(0) || offset + uint32(2 - 1) > numel(in)
        % buffer not large enough for header
        valid = uint8(0);
        bus.clock = zeros([1 1], 'uint32');
    else
        sz = typecast(in(offset:(offset+uint32(2-1))), 'uint16')';
        offset = offset + uint32(2);
        % check size
        if sz(1) ~= uint16(1), valid = uint8(0); end
        elements = uint32(1);
        for i = 1:1
             elements = elements * uint32(sz(i));
        end
        if elements > uint32(0) && offset + uint32(elements*4 - 1) > numel(in)
            % buffer not large enough for data
            valid = uint8(0);
        end
        if valid && elements == uint32(0)
            % assigning empty value
            bus.clock = zeros([1 1], 'uint32');
        else
            % read and typecast data
            assert(elements <= uint32(1));
            bus.clock = zeros([1 1], 'uint32');
            if elements > uint32(0)
                bus.clock(1:elements) = typecast(in(offset:offset+uint32(elements*4 - 1))', 'uint32')';
                offset = offset + uint32(elements*4);
            end
        end
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-size field hand as nested Bus: HandBus
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % deserialize each bus element within
    subNamePrefix = uint8([namePrefix, 'hand_']);
    [bus.hand, valid, offset] = deserializeBus_HandBus(in, offset, valid, subNamePrefix);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-size field eye as nested Bus: EyeInputBus
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % deserialize each bus element within
    subNamePrefix = uint8([namePrefix, 'eye_']);
    [bus.eye, valid, offset] = deserializeBus_EyeInputBus(in, offset, valid, subNamePrefix);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-size field analog as nested Bus: AnalogInputBus
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % deserialize each bus element within
    subNamePrefix = uint8([namePrefix, 'analog_']);
    [bus.analog, valid, offset] = deserializeBus_AnalogInputBus(in, offset, valid, subNamePrefix);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-size field scopeState as nested Bus: MicroscopeStateBus
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % deserialize each bus element within
    subNamePrefix = uint8([namePrefix, 'scopeState_']);
    [bus.scopeState, valid, offset] = deserializeBus_MicroscopeStateBus(in, offset, valid, subNamePrefix);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-size field scopeTiming as nested Bus: ScopeTimingBus
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % deserialize each bus element within
    subNamePrefix = uint8([namePrefix, 'scopeTiming_']);
    [bus.scopeTiming, valid, offset] = deserializeBus_ScopeTimingBus(in, offset, valid, subNamePrefix);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-size field mOEGFrameInfo as nested Bus: mOEGFrameInfoBus
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % deserialize each bus element within
    subNamePrefix = uint8([namePrefix, 'mOEGFrameInfo_']);
    [bus.mOEGFrameInfo, valid, offset] = deserializeBus_mOEGFrameInfoBus(in, offset, valid, subNamePrefix);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-size field decoderBus as nested Bus: DecoderBus
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % deserialize each bus element within
    subNamePrefix = uint8([namePrefix, 'decoderBus_']);
    [bus.decoderBus, valid, offset] = deserializeBus_DecoderBus(in, offset, valid, subNamePrefix);


end