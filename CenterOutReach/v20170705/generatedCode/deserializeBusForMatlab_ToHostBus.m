function [bus, valid, offset] = deserializeBusForMatlab_ToHostBus(input, offset, valid, namePrefix)
%#codegen
% DO NOT EDIT: Auto-generated by 
%   BusSerialize.writeDeserializeBusCode('ToHostBus')

    in = typecast(input, 'uint8');
    if nargin < 2
         offset = uint32(1);
    end
    if nargin < 3
         valid = uint8(1);
    end
    if nargin < 4
        namePrefix = uint8('');
    end
    offset = uint32(offset);

    bus = initializeBus_ToHostBus();
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-size field rigConfig as nested Bus: RigConfigBus
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % deserialize each bus element within
    subNamePrefix = uint8([namePrefix, 'rigConfig_']);
    [bus.rigConfig, valid, offset] = deserializeBus_RigConfigBus(in, offset, valid, subNamePrefix);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-sized field clock
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Checking header
    if valid == uint8(0) || offset + uint32(15 + numel(namePrefix) - 1) > numel(in)
        valid = uint8(0);
    end
    expectedHeader_clock = uint8([2, 5, typecast(uint16(numel(namePrefix) + 5), 'uint8'), namePrefix, 'clock', typecast(uint16(2), 'uint8'), 'ms', 7, 1])';
    for headerOffset = 1:uint32(15+numel(namePrefix)-1)
        valid = uint8(valid && in(offset+headerOffset-1) == expectedHeader_clock(headerOffset));
    end
    offset = offset + uint32(15 + numel(namePrefix));

    % Establishing size
    if valid == uint8(0) || offset + uint32(2 - 1) > numel(in)
        % buffer not large enough for header
        valid = uint8(0);
        bus.clock = zeros([1 1], 'uint32');
    else
        sz = typecast(in(offset:(offset+uint32(2-1))), 'uint16')';
        offset = offset + uint32(2);
        % check size
        if sz(1) ~= uint16(1), valid = uint8(0); end
        elements = uint32(1);
        for i = 1:1
             elements = elements * uint32(sz(i));
        end
        if elements > uint32(0) && offset + uint32(elements*4 - 1) > numel(in)
            % buffer not large enough for data
            valid = uint8(0);
        end
        if valid && elements == uint32(0)
            % assigning empty value
            bus.clock = zeros([1 1], 'uint32');
        else
            % read and typecast data
            assert(elements <= uint32(1));
            bus.clock = zeros([1 1], 'uint32');
            if elements > uint32(0)
                bus.clock(1:elements) = typecast(in(offset:offset+uint32(elements*4 - 1))', 'uint32')';
                offset = offset + uint32(elements*4);
            end
        end
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-size field scopeState as nested Bus: MicroscopeStateBus
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % deserialize each bus element within
    subNamePrefix = uint8([namePrefix, 'scopeState_']);
    [bus.scopeState, valid, offset] = deserializeBus_MicroscopeStateBus(in, offset, valid, subNamePrefix);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-sized field juiceRelease
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Checking header
    if valid == uint8(0) || offset + uint32(20 + numel(namePrefix) - 1) > numel(in)
        valid = uint8(0);
    end
    expectedHeader_juiceRelease = uint8([2, 4, typecast(uint16(numel(namePrefix) + 12), 'uint8'), namePrefix, 'juiceRelease', typecast(uint16(0), 'uint8'), '', 3, 1])';
    for headerOffset = 1:uint32(20+numel(namePrefix)-1)
        valid = uint8(valid && in(offset+headerOffset-1) == expectedHeader_juiceRelease(headerOffset));
    end
    offset = offset + uint32(20 + numel(namePrefix));

    % Establishing size
    if valid == uint8(0) || offset + uint32(2 - 1) > numel(in)
        % buffer not large enough for header
        valid = uint8(0);
        bus.juiceRelease = zeros([1 1], 'uint8');
    else
        sz = typecast(in(offset:(offset+uint32(2-1))), 'uint16')';
        offset = offset + uint32(2);
        % check size
        if sz(1) ~= uint16(1), valid = uint8(0); end
        elements = uint32(1);
        for i = 1:1
             elements = elements * uint32(sz(i));
        end
        if elements > uint32(0) && offset + uint32(elements*1 - 1) > numel(in)
            % buffer not large enough for data
            valid = uint8(0);
        end
        if valid && elements == uint32(0)
            % assigning empty value
            bus.juiceRelease = zeros([1 1], 'uint8');
        else
            % read and typecast data
            assert(elements <= uint32(1));
            bus.juiceRelease = zeros([1 1], 'uint8');
            if elements > uint32(0)
                bus.juiceRelease(1:elements) = typecast(in(offset:offset+uint32(elements*1 - 1))', 'uint8')';
                offset = offset + uint32(elements*1);
            end
        end
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-size field hand as nested Bus: HandOutputBus
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % deserialize each bus element within
    subNamePrefix = uint8([namePrefix, 'hand_']);
    [bus.hand, valid, offset] = deserializeBus_HandOutputBus(in, offset, valid, subNamePrefix);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-size field eye as nested Bus: EyeOutputBus
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % deserialize each bus element within
    subNamePrefix = uint8([namePrefix, 'eye_']);
    [bus.eye, valid, offset] = deserializeBus_EyeOutputBus(in, offset, valid, subNamePrefix);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-size field analog as nested Bus: AnalogOutputBus
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % deserialize each bus element within
    subNamePrefix = uint8([namePrefix, 'analog_']);
    [bus.analog, valid, offset] = deserializeBus_AnalogOutputBus(in, offset, valid, subNamePrefix);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-size field trialData as nested Bus: TrialDataOutputBus
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % deserialize each bus element within
    subNamePrefix = uint8([namePrefix, 'trialData_']);
    [bus.trialData, valid, offset] = deserializeBus_TrialDataOutputBus(in, offset, valid, subNamePrefix);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-size field condition as nested Bus: ConditionBus
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % deserialize each bus element within
    subNamePrefix = uint8([namePrefix, 'condition_']);
    [bus.condition, valid, offset] = deserializeBus_ConditionBus(in, offset, valid, subNamePrefix);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-size field taskControl as nested Bus: TaskControlBus
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % deserialize each bus element within
    subNamePrefix = uint8([namePrefix, 'taskControl_']);
    [bus.taskControl, valid, offset] = deserializeBus_TaskControlBus(in, offset, valid, subNamePrefix);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-size field param as nested Bus: ParamBus
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % deserialize each bus element within
    subNamePrefix = uint8([namePrefix, 'param_']);
    [bus.param, valid, offset] = deserializeBus_ParamBus(in, offset, valid, subNamePrefix);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-size field dataLoggerInfo as nested Bus: DataLoggerInfoBus
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % deserialize each bus element within
    subNamePrefix = uint8([namePrefix, 'dataLoggerInfo_']);
    [bus.dataLoggerInfo, valid, offset] = deserializeBus_DataLoggerInfoBus(in, offset, valid, subNamePrefix);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-sized field trialId
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Checking header
    if valid == uint8(0) || offset + uint32(15 + numel(namePrefix) - 1) > numel(in)
        valid = uint8(0);
    end
    expectedHeader_trialId = uint8([2, 4, typecast(uint16(numel(namePrefix) + 7), 'uint8'), namePrefix, 'trialId', typecast(uint16(0), 'uint8'), '', 7, 1])';
    for headerOffset = 1:uint32(15+numel(namePrefix)-1)
        valid = uint8(valid && in(offset+headerOffset-1) == expectedHeader_trialId(headerOffset));
    end
    offset = offset + uint32(15 + numel(namePrefix));

    % Establishing size
    if valid == uint8(0) || offset + uint32(2 - 1) > numel(in)
        % buffer not large enough for header
        valid = uint8(0);
        bus.trialId = zeros([1 1], 'uint32');
    else
        sz = typecast(in(offset:(offset+uint32(2-1))), 'uint16')';
        offset = offset + uint32(2);
        % check size
        if sz(1) ~= uint16(1), valid = uint8(0); end
        elements = uint32(1);
        for i = 1:1
             elements = elements * uint32(sz(i));
        end
        if elements > uint32(0) && offset + uint32(elements*4 - 1) > numel(in)
            % buffer not large enough for data
            valid = uint8(0);
        end
        if valid && elements == uint32(0)
            % assigning empty value
            bus.trialId = zeros([1 1], 'uint32');
        else
            % read and typecast data
            assert(elements <= uint32(1));
            bus.trialId = zeros([1 1], 'uint32');
            if elements > uint32(0)
                bus.trialId(1:elements) = typecast(in(offset:offset+uint32(elements*4 - 1))', 'uint32')';
                offset = offset + uint32(elements*4);
            end
        end
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-size field taskStatistics as nested Bus: TaskStatisticsBus
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % deserialize each bus element within
    subNamePrefix = uint8([namePrefix, 'taskStatistics_']);
    [bus.taskStatistics, valid, offset] = deserializeBus_TaskStatisticsBus(in, offset, valid, subNamePrefix);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing variable-sized field taskEventBuffer
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Checking header
    if valid == uint8(0) || offset + uint32(27 + numel(namePrefix) - 1) > numel(in)
        valid = uint8(0);
    end
    expectedHeader_taskEventBuffer = uint8([1, 5, typecast(uint16(numel(namePrefix) + 15), 'uint8'), namePrefix, 'taskEventBuffer', typecast(uint16(4), 'uint8'), 'enum', 8, 1])';
    for headerOffset = 1:uint32(27+numel(namePrefix)-1)
        valid = uint8(valid && in(offset+headerOffset-1) == expectedHeader_taskEventBuffer(headerOffset));
    end
    offset = offset + uint32(27 + numel(namePrefix));

    % Establishing size
    coder.varsize('bus.taskEventBuffer', 50);
    if valid == uint8(0) || offset + uint32(2 - 1) > numel(in)
        % buffer not large enough for header
        valid = uint8(0);
        bus.taskEventBuffer = repmat(TaskEvent.CenterOnset, [50 1]);
    else
        sz = typecast(in(offset:(offset+uint32(2-1))), 'uint16')';
        offset = offset + uint32(2);
        % check size
        if prod(sz) > uint16(1350), valid = uint8(0); end
        elements = uint32(1);
        for i = 1:1
             elements = elements * uint32(sz(i));
        end
        if elements > uint32(0) && offset + uint32(elements*1 - 1) > numel(in)
            % buffer not large enough for data
            valid = uint8(0);
        end
        if valid && elements == uint32(0)
            % assigning empty value
            taskEventBuffer_tempEnumVec = TaskEvent.CenterOnset;
            bus.taskEventBuffer = taskEventBuffer_tempEnumVec([], 1);
        else
            % read and typecast data
            assert(elements <= uint32(1350));
            taskEventBuffer_tempEnumVec = TaskEvent.CenterOnset;
            bus.taskEventBuffer = taskEventBuffer_tempEnumVec([], 1);
            if elements > uint32(0)
                coder.varsize('tempVar_taskEventBuffer', 50);
                tempVar_taskEventBuffer = repmat(TaskEvent.CenterOnset, [50 1]); % initialize enum to size with default
                [tempVar_taskEventBuffer, nValues, valueValid] = semicolonDelimitedStringToEnumVector_TaskEvent(typecast(in(offset:offset+uint32(elements*1 - 1))', 'uint8')',tempVar_taskEventBuffer);
                if nValues <= 50 && valueValid
                    bus.taskEventBuffer = tempVar_taskEventBuffer(uint32(1):nValues);
                else
                    % unknown enum value, leaving as char only for Matlab
                    bus.taskEventBuffer = typecast(in(offset:offset+uint32(elements*1 - 1)), 'char');
                end
                offset = offset + uint32(elements*1);
            end
        end
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing variable-sized field taskEventTimes
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Checking header
    if valid == uint8(0) || offset + uint32(24 + numel(namePrefix) - 1) > numel(in)
        valid = uint8(0);
    end
    expectedHeader_taskEventTimes = uint8([3, 5, typecast(uint16(numel(namePrefix) + 14), 'uint8'), namePrefix, 'taskEventTimes', typecast(uint16(2), 'uint8'), 'ms', 7, 1])';
    for headerOffset = 1:uint32(24+numel(namePrefix)-1)
        valid = uint8(valid && in(offset+headerOffset-1) == expectedHeader_taskEventTimes(headerOffset));
    end
    offset = offset + uint32(24 + numel(namePrefix));

    % Establishing size
    coder.varsize('bus.taskEventTimes', 50);
    if valid == uint8(0) || offset + uint32(2 - 1) > numel(in)
        % buffer not large enough for header
        valid = uint8(0);
        bus.taskEventTimes = zeros([50 1], 'uint32');
    else
        sz = typecast(in(offset:(offset+uint32(2-1))), 'uint16')';
        offset = offset + uint32(2);
        % check size
        if sz(1) > uint16(50), valid = uint8(0); end
        elements = uint32(1);
        for i = 1:1
             elements = elements * uint32(sz(i));
        end
        if elements > uint32(0) && offset + uint32(elements*4 - 1) > numel(in)
            % buffer not large enough for data
            valid = uint8(0);
        end
        if valid && elements == uint32(0)
            % assigning empty value
            bus.taskEventTimes = zeros([0 1], 'uint32');
        else
            % mollify codegen
            assert(sz(1) <= uint16(50));
            % read and typecast data
            assert(elements <= uint32(50));
            bus.taskEventTimes = zeros([sz uint16(1)], 'uint32');
            if elements > uint32(0)
                bus.taskEventTimes(1:elements) = typecast(in(offset:offset+uint32(elements*4 - 1))', 'uint32')';
                offset = offset + uint32(elements*4);
            end
        end
    end


end