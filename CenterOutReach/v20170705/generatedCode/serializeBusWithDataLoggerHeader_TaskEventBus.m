function [out, valid] = serializeBusWithDataLoggerHeader_TaskEventBus(bus, groupType, groupName, timestamp, namePrefix)
%#codegen
% DO NOT EDIT: Auto-generated by 
%   BusSerialize.writeSerializeBusCode('TaskEventBus')

    if nargin < 5, namePrefix = uint8(''); end
    namePrefixBytes = uint8(namePrefix(:))';
    valid = uint8(0);
    headerLength = uint32(BusSerialize.computeDataLoggerHeaderLength(uint8([namePrefixBytes, groupName])));
    coder.varsize('out', 46 + 1*numel(namePrefix) + headerLength);
    outSize = headerLength + getSerializedBusLength_TaskEventBus(bus, namePrefix);
    assert(outSize <= headerLength + 46 + 1*numel(namePrefix));
    out = zeros(outSize, 1, 'uint8');
    offset = uint32(1);

    % Serialize data logger header
    header = BusSerialize.serializeDataLoggerHeader(groupType, uint8([namePrefixBytes, groupName]), uint32(3591213127), uint16(1), timestamp);
    out(1:headerLength) = uint8(header);
    offset = offset + headerLength;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized event
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Check input size is valid
    assert(numel(bus.event) == 1, 'numel(bus.event) must be 1');    % event bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(2);
    offset = offset + uint32(1);

    % event signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(6);
    offset = offset + uint32(1);

    % event name with prefix 
    if(offset+uint32(2+5 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(numel(namePrefixBytes) + 5), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(numel(namePrefixBytes) + 5-1))) = [namePrefixBytes, uint8('event')];
    offset = offset + uint32(numel(namePrefixBytes) + 5);

    % event units
    if(offset+uint32(2+4 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(4), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(4-1))) = uint8('enum');
    offset = offset + uint32(4);

    % event data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(8); % data type is TaskEvent
    offset = offset + uint32(1);

    % event dimensions
    if(offset > numel(out)), return, end
    if(offset+uint32(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);
    % converting enum type TaskEvent to string
    coder.varsize('enumAsStr_event', 27);
    enumAsStr_event = zeros(0, 1, 'uint8');
    for iEnum = 1:numel(bus.event)
        enumAsStr_event = [enumAsStr_event; uint8(enumToString_TaskEvent(bus.event(iEnum)))']; %#ok<AGROW>
        if iEnum < numel(bus.event)
            enumAsStr_event = [enumAsStr_event; uint8(';')]; %#ok<AGROW>
        end
    end
    out(offset:(offset+uint32(2*1-1))) = typecast(uint16(numel(enumAsStr_event)), 'uint8');
    offset = offset + uint32(2*1);

    % event data
    nBytes = uint32(numel(enumAsStr_event));
    if nBytes > uint32(0)
        if(offset+uint32(nBytes-1) > numel(out)), return, end
        out(offset:(offset+uint32(nBytes-1))) = uint8(enumAsStr_event(:));
    end
    offset = offset + nBytes; %#ok<NASGU>

    valid = uint8(1);
end