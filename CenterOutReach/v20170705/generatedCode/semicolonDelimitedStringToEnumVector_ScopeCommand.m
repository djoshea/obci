function [enumVector, nValues, valid] = semicolonDelimitedStringToEnumVector_ScopeCommand(str, enumVector)
%#codegen
% DO NOT EDIT: Auto-generated by 
%   BusSerialize.writeSemicolonDelimitedStringToEnumVectorCode('ScopeCommand')

    valid = uint8(1);
    nValues = uint32(0);
    coder.varsize('token', 21);
    if nargin < 2
        maxValues = Inf; % for matlab use only
        enumVector = ScopeCommand.empty(0, 1);
    else
        maxValues = numel(enumVector); % for simulink codegen use, required to avoid undetermined max size issue
    end

    counter = 1;
    idx1 = 1;
    while(idx1 <= numel(str))
        idx2 = idx1+1;
        while(idx2 <= numel(str))
            if str(idx2) == ';'
                break;
            end
            idx2 = idx2 + 1;
        end

    if idx2-idx1 > 21
        valid = uint8(0);
        return;
    end
    token = str(idx1:idx2-1);
        if isequal(uint8(token(:)), uint8('NextTrial')')
            enumVector(counter) = ScopeCommand.NextTrial;
        elseif isequal(uint8(token(:)), uint8('StartImagingOnTrigger')')
            enumVector(counter) = ScopeCommand.StartImagingOnTrigger;
        elseif isequal(uint8(token(:)), uint8('StartTrialImaging')')
            enumVector(counter) = ScopeCommand.StartTrialImaging;
        elseif isequal(uint8(token(:)), uint8('EndTrialImaging')')
            enumVector(counter) = ScopeCommand.EndTrialImaging;
        elseif isequal(uint8(token(:)), uint8('StopImaging')')
            enumVector(counter) = ScopeCommand.StopImaging;
        else
            valid = uint8(0);
            return;
        end
        counter = counter + 1;
        if counter > maxValues
            nValues = uint32(counter - 1);
            return;
        end
        idx1 = idx2 + 1;
    end
    nValues = uint32(counter - 1);

end