function [bus, valid, offset] = deserializeBus_DisplayCommandBus(input, offset, valid, namePrefix)
%#codegen
% DO NOT EDIT: Auto-generated by 
%   BusSerialize.writeDeserializeBusCode('DisplayCommandBus')

    in = typecast(input, 'uint8');
    if nargin < 2
         offset = uint32(1);
    end
    if nargin < 3
         valid = uint8(1);
    end
    if nargin < 4
        namePrefix = uint8('');
    end
    offset = uint32(offset);

    bus = initializeBus_DisplayCommandBus();
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-sized field taskCommand
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Checking header
    if valid == uint8(0) || offset + uint32(23 + numel(namePrefix) - 1) > numel(in)
        valid = uint8(0);
    end
    expectedHeader_taskCommand = uint8([0, 5, typecast(uint16(numel(namePrefix) + 11), 'uint8'), namePrefix, 'taskCommand', typecast(uint16(4), 'uint8'), 'enum', 8, 1])';
    for headerOffset = 1:uint32(23+numel(namePrefix)-1)
        valid = uint8(valid && in(offset+headerOffset-1) == expectedHeader_taskCommand(headerOffset));
    end
    offset = offset + uint32(23 + numel(namePrefix));

    % Establishing size
    if valid == uint8(0) || offset + uint32(2 - 1) > numel(in)
        % buffer not large enough for header
        valid = uint8(0);
        bus.taskCommand = repmat(DisplayCommand.TaskPaused, [1 1]);
    else
        sz = typecast(in(offset:(offset+uint32(2-1))), 'uint16')';
        offset = offset + uint32(2);
        % check size
        if prod(sz) > uint16(25), valid = uint8(0); end
        elements = uint32(1);
        for i = 1:1
             elements = elements * uint32(sz(i));
        end
        if elements > uint32(0) && offset + uint32(elements*1 - 1) > numel(in)
            % buffer not large enough for data
            valid = uint8(0);
        end
        if valid && elements == uint32(0)
            % assigning empty value
            bus.taskCommand = repmat(DisplayCommand.TaskPaused, [1 1]);
        else
            % read and typecast data
            assert(elements <= uint32(25));
            bus.taskCommand = repmat(DisplayCommand.TaskPaused, [1 1]);
            if elements > uint32(0)
                coder.varsize('tempVar_taskCommand', 1);
                tempVar_taskCommand = repmat(DisplayCommand.TaskPaused, [1 1]); % initialize enum to size with default
                [tempVar_taskCommand, nValues, valueValid] = semicolonDelimitedStringToEnumVector_DisplayCommand(typecast(in(offset:offset+uint32(elements*1 - 1))', 'uint8')',tempVar_taskCommand);
                bus.taskCommand = repmat(DisplayCommand.TaskPaused, [1 1]);
                if nValues <= 1 && valueValid
                    bus.taskCommand(uint32(1):nValues) = tempVar_taskCommand(uint32(1):nValues);
                else
                    valid = uint8(0);
                end
                offset = offset + uint32(elements*1);
            end
        end
    end


end