function [str, valid] = enumToString_TaskState(enumValue)
%#codegen
% DO NOT EDIT: Auto-generated by 
%   BusSerialize.writeEnumToStringCode('TaskState')

    valid = uint8(1);
    coder.varsize('str', [1 22], [false true]);
    if ischar(enumValue), str = enumValue; valid = uint8(1); return; end
    switch enumValue
        case TaskState.TaskPaused
            str = uint8('TaskPaused');
        case TaskState.StartTask
            str = uint8('StartTask');
        case TaskState.GetNewTrialParams
            str = uint8('GetNewTrialParams');
        case TaskState.InitTrial
            str = uint8('InitTrial');
        case TaskState.WaitCenterAcquire
            str = uint8('WaitCenterAcquire');
        case TaskState.WaitCenterSettle
            str = uint8('WaitCenterSettle');
        case TaskState.WaitCenterHold
            str = uint8('WaitCenterHold');
        case TaskState.DelayPeriod
            str = uint8('DelayPeriod');
        case TaskState.GoCueZeroDelay
            str = uint8('GoCueZeroDelay');
        case TaskState.GoCueNonZeroDelay
            str = uint8('GoCueNonZeroDelay');
        case TaskState.WaitMoveOnset
            str = uint8('WaitMoveOnset');
        case TaskState.WaitTargetAcquire
            str = uint8('WaitTargetAcquire');
        case TaskState.WaitTargetSettle
            str = uint8('WaitTargetSettle');
        case TaskState.WaitTargetHold
            str = uint8('WaitTargetHold');
        case TaskState.Success
            str = uint8('Success');
        case TaskState.ReachEnd
            str = uint8('ReachEnd');
        case TaskState.ITI
            str = uint8('ITI');
        case TaskState.FailureCenterAcquire
            str = uint8('FailureCenterAcquire');
        case TaskState.FailureCenterHold
            str = uint8('FailureCenterHold');
        case TaskState.FailureDelayMove
            str = uint8('FailureDelayMove');
        case TaskState.FailureRTTooFast
            str = uint8('FailureRTTooFast');
        case TaskState.FailureRTTooSlow
            str = uint8('FailureRTTooSlow');
        case TaskState.FailureTargetAcquire
            str = uint8('FailureTargetAcquire');
        case TaskState.FailureTargetHold
            str = uint8('FailureTargetHold');
        case TaskState.FailureLowPeakVelocity
            str = uint8('FailureLowPeakVelocity');
        case TaskState.FailureHandNotSeen
            str = uint8('FailureHandNotSeen');
        case TaskState.TaskPurgatory
            str = uint8('TaskPurgatory');
        otherwise
            str = uint8('TaskPaused');
            valid = uint8(0);
    end
end