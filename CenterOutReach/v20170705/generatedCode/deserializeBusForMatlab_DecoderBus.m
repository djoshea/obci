function [bus, valid, offset] = deserializeBusForMatlab_DecoderBus(input, offset, valid, namePrefix)
%#codegen
% DO NOT EDIT: Auto-generated by 
%   BusSerialize.writeDeserializeBusCode('DecoderBus')

    in = typecast(input, 'uint8');
    if nargin < 2
         offset = uint32(1);
    end
    if nargin < 3
         valid = uint8(1);
    end
    if nargin < 4
        namePrefix = uint8('');
    end
    offset = uint32(offset);

    bus = initializeBus_DecoderBus();
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-sized field decodeConditionId
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Checking header
    if valid == uint8(0) || offset + uint32(25 + numel(namePrefix) - 1) > numel(in)
        valid = uint8(0);
    end
    expectedHeader_decodeConditionId = uint8([2, 5, typecast(uint16(numel(namePrefix) + 17), 'uint8'), namePrefix, 'decodeConditionId', typecast(uint16(0), 'uint8'), '', 5, 1])';
    for headerOffset = 1:uint32(25+numel(namePrefix)-1)
        valid = uint8(valid && in(offset+headerOffset-1) == expectedHeader_decodeConditionId(headerOffset));
    end
    offset = offset + uint32(25 + numel(namePrefix));

    % Establishing size
    if valid == uint8(0) || offset + uint32(2 - 1) > numel(in)
        % buffer not large enough for header
        valid = uint8(0);
        bus.decodeConditionId = zeros([1 1], 'uint16');
    else
        sz = typecast(in(offset:(offset+uint32(2-1))), 'uint16')';
        offset = offset + uint32(2);
        % check size
        if sz(1) ~= uint16(1), valid = uint8(0); end
        elements = uint32(1);
        for i = 1:1
             elements = elements * uint32(sz(i));
        end
        if elements > uint32(0) && offset + uint32(elements*2 - 1) > numel(in)
            % buffer not large enough for data
            valid = uint8(0);
        end
        if valid && elements == uint32(0)
            % assigning empty value
            bus.decodeConditionId = zeros([1 1], 'uint16');
        else
            % read and typecast data
            assert(elements <= uint32(1));
            bus.decodeConditionId = zeros([1 1], 'uint16');
            if elements > uint32(0)
                bus.decodeConditionId(1:elements) = typecast(in(offset:offset+uint32(elements*2 - 1))', 'uint16')';
                offset = offset + uint32(elements*2);
            end
        end
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing fixed-sized field conditionPredictionLikelihood
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Checking header
    if valid == uint8(0) || offset + uint32(39 + numel(namePrefix) - 1) > numel(in)
        valid = uint8(0);
    end
    expectedHeader_conditionPredictionLikelihood = uint8([2, 5, typecast(uint16(numel(namePrefix) + 29), 'uint8'), namePrefix, 'conditionPredictionLikelihood', typecast(uint16(2), 'uint8'), 'AU', 0, 2])';
    for headerOffset = 1:uint32(39+numel(namePrefix)-1)
        valid = uint8(valid && in(offset+headerOffset-1) == expectedHeader_conditionPredictionLikelihood(headerOffset));
    end
    offset = offset + uint32(39 + numel(namePrefix));

    % Establishing size
    if valid == uint8(0) || offset + uint32(4 - 1) > numel(in)
        % buffer not large enough for header
        valid = uint8(0);
        bus.conditionPredictionLikelihood = zeros([4 1], 'double');
    else
        sz = typecast(in(offset:(offset+uint32(4-1))), 'uint16')';
        offset = offset + uint32(4);
        % check size
        if sz(1) ~= uint16(4), valid = uint8(0); end
        if sz(2) ~= uint16(1), valid = uint8(0); end
        elements = uint32(1);
        for i = 1:2
             elements = elements * uint32(sz(i));
        end
        if elements > uint32(0) && offset + uint32(elements*8 - 1) > numel(in)
            % buffer not large enough for data
            valid = uint8(0);
        end
        if valid && elements == uint32(0)
            % assigning empty value
            bus.conditionPredictionLikelihood = zeros([4 1], 'double');
        else
            % read and typecast data
            assert(elements <= uint32(4));
            bus.conditionPredictionLikelihood = zeros([4 1], 'double');
            if elements > uint32(0)
                bus.conditionPredictionLikelihood(1:elements) = typecast(in(offset:offset+uint32(elements*8 - 1))', 'double')';
                offset = offset + uint32(elements*8);
            end
        end
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing variable-sized field classifierInfo
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Checking header
    if valid == uint8(0) || offset + uint32(26 + numel(namePrefix) - 1) > numel(in)
        valid = uint8(0);
    end
    expectedHeader_classifierInfo = uint8([1, 4, typecast(uint16(numel(namePrefix) + 14), 'uint8'), namePrefix, 'classifierInfo', typecast(uint16(4), 'uint8'), 'char', 8, 1])';
    for headerOffset = 1:uint32(26+numel(namePrefix)-1)
        valid = uint8(valid && in(offset+headerOffset-1) == expectedHeader_classifierInfo(headerOffset));
    end
    offset = offset + uint32(26 + numel(namePrefix));

    % Establishing size
    coder.varsize('bus.classifierInfo', 300);
    if valid == uint8(0) || offset + uint32(2 - 1) > numel(in)
        % buffer not large enough for header
        valid = uint8(0);
        bus.classifierInfo = zeros([300 1], 'uint8');
    else
        sz = typecast(in(offset:(offset+uint32(2-1))), 'uint16')';
        offset = offset + uint32(2);
        % check size
        if sz(1) > uint16(300), valid = uint8(0); end
        elements = uint32(1);
        for i = 1:1
             elements = elements * uint32(sz(i));
        end
        if elements > uint32(0) && offset + uint32(elements*1 - 1) > numel(in)
            % buffer not large enough for data
            valid = uint8(0);
        end
        if valid && elements == uint32(0)
            % assigning empty value
            bus.classifierInfo = zeros([0 1], 'uint8');
        else
            % mollify codegen
            assert(sz(1) <= uint16(300));
            % read and typecast data
            assert(elements <= uint32(300));
            bus.classifierInfo = zeros([sz uint16(1)], 'uint8');
            bus.classifierInfo = char(bus.classifierInfo);
            if isempty(bus.classifierInfo), bus.classifierInfo = ''; end
            if elements > uint32(0)
                bus.classifierInfo = char(in(offset:offset+uint32(elements*1 - 1)));
                if size(bus.classifierInfo, 1) > size(bus.classifierInfo, 2) && size(bus.classifierInfo, 2) == 1, bus.classifierInfo = bus.classifierInfo'; end
                offset = offset + uint32(elements*1);
            end
        end
    end


end