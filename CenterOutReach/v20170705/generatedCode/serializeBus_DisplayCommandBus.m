function [out, valid] = serializeBus_DisplayCommandBus(bus, namePrefix)
%#codegen
% DO NOT EDIT: Auto-generated by 
%   BusSerialize.writeSerializeBusCode('DisplayCommandBus')

    if nargin < 2, namePrefix = uint8(''); end
    namePrefixBytes = uint8(namePrefix(:))';
    valid = uint8(0);
    coder.varsize('out', 50 + 1*numel(namePrefix));
    outSize = getSerializedBusLength_DisplayCommandBus(bus, namePrefix);
    assert(outSize <= 50 + 1*numel(namePrefix));
    out = zeros(outSize, 1, 'uint8');
    offset = uint32(1);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized taskCommand
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Check input size is valid
    assert(numel(bus.taskCommand) == 1, 'numel(bus.taskCommand) must be 1');    % taskCommand bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);
    offset = offset + uint32(1);

    % taskCommand signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(5);
    offset = offset + uint32(1);

    % taskCommand name with prefix 
    if(offset+uint32(2+11 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(numel(namePrefixBytes) + 11), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(numel(namePrefixBytes) + 11-1))) = [namePrefixBytes, uint8('taskCommand')];
    offset = offset + uint32(numel(namePrefixBytes) + 11);

    % taskCommand units
    if(offset+uint32(2+4 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(4), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(4-1))) = uint8('enum');
    offset = offset + uint32(4);

    % taskCommand data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(8); % data type is DisplayCommand
    offset = offset + uint32(1);

    % taskCommand dimensions
    if(offset > numel(out)), return, end
    if(offset+uint32(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);
    % converting enum type DisplayCommand to string
    coder.varsize('enumAsStr_taskCommand', 25);
    enumAsStr_taskCommand = zeros(0, 1, 'uint8');
    for iEnum = 1:numel(bus.taskCommand)
        enumAsStr_taskCommand = [enumAsStr_taskCommand; uint8(enumToString_DisplayCommand(bus.taskCommand(iEnum)))']; %#ok<AGROW>
        if iEnum < numel(bus.taskCommand)
            enumAsStr_taskCommand = [enumAsStr_taskCommand; uint8(';')]; %#ok<AGROW>
        end
    end
    out(offset:(offset+uint32(2*1-1))) = typecast(uint16(numel(enumAsStr_taskCommand)), 'uint8');
    offset = offset + uint32(2*1);

    % taskCommand data
    nBytes = uint32(numel(enumAsStr_taskCommand));
    if nBytes > uint32(0)
        if(offset+uint32(nBytes-1) > numel(out)), return, end
        out(offset:(offset+uint32(nBytes-1))) = uint8(enumAsStr_taskCommand(:));
    end
    offset = offset + nBytes; %#ok<NASGU>

    valid = uint8(1);
end