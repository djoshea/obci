function [out, valid] = serializeBus_DecoderBus(bus, namePrefix)
%#codegen
% DO NOT EDIT: Auto-generated by 
%   BusSerialize.writeSerializeBusCode('DecoderBus')

    if nargin < 2, namePrefix = uint8(''); end
    namePrefixBytes = uint8(namePrefix(:))';
    valid = uint8(0);
    coder.varsize('out', 432 + 4*numel(namePrefix));
    outSize = getSerializedBusLength_DecoderBus(bus, namePrefix);
    assert(outSize <= 432 + 4*numel(namePrefix));
    out = zeros(outSize, 1, 'uint8');
    offset = uint32(1);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized decodeConditionId
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Check input size is valid
    assert(numel(bus.decodeConditionId) == 1, 'numel(bus.decodeConditionId) must be 1');    % decodeConditionId bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(2);
    offset = offset + uint32(1);

    % decodeConditionId signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(5);
    offset = offset + uint32(1);

    % decodeConditionId name with prefix 
    if(offset+uint32(2+17 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(numel(namePrefixBytes) + 17), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(numel(namePrefixBytes) + 17-1))) = [namePrefixBytes, uint8('decodeConditionId')];
    offset = offset + uint32(numel(namePrefixBytes) + 17);

    % decodeConditionId units
    if(offset+uint32(2+0 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(0), 'uint8');
    offset = offset + uint32(2);

    % decodeConditionId data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(5); % data type is uint16
    offset = offset + uint32(1);

    % decodeConditionId dimensions
    if(offset > numel(out)), return, end
    if(offset+uint32(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);
    out(offset:(offset+uint32(2*1-1))) = typecast(uint16(numel(bus.decodeConditionId)), 'uint8');
    offset = offset + uint32(2*1);

    % decodeConditionId data
    nBytes = uint32(2 * numel(bus.decodeConditionId));
    if nBytes > uint32(0)
        if(offset+uint32(nBytes-1) > numel(out)), return, end
        out(offset:(offset+uint32(nBytes-1))) = typecast(uint16(bus.decodeConditionId(:))', 'uint8')';
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized conditionPredictionLikelihood
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Check input size is valid
    assert(ndims(bus.conditionPredictionLikelihood) == 2, 'ndims(bus.conditionPredictionLikelihood) must be 2');    assert(size(bus.conditionPredictionLikelihood, 1) == 4, 'size(bus.conditionPredictionLikelihood, 1) must be 4');    assert(size(bus.conditionPredictionLikelihood, 2) == 1, 'size(bus.conditionPredictionLikelihood, 2) must be 1');    % conditionPredictionLikelihood bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(2);
    offset = offset + uint32(1);

    % conditionPredictionLikelihood signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(5);
    offset = offset + uint32(1);

    % conditionPredictionLikelihood name with prefix 
    if(offset+uint32(2+29 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(numel(namePrefixBytes) + 29), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(numel(namePrefixBytes) + 29-1))) = [namePrefixBytes, uint8('conditionPredictionLikelihood')];
    offset = offset + uint32(numel(namePrefixBytes) + 29);

    % conditionPredictionLikelihood units
    if(offset+uint32(2+2 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(2), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(2-1))) = uint8('AU');
    offset = offset + uint32(2);

    % conditionPredictionLikelihood data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(0); % data type is double
    offset = offset + uint32(1);

    % conditionPredictionLikelihood dimensions
    if(offset > numel(out)), return, end
    if(offset+uint32(1+2*2-1) > numel(out)), return, end
    out(offset) = uint8(2);
    offset = offset + uint32(1);
    out(offset:(offset+uint32(2*2-1))) = typecast(uint16(size(bus.conditionPredictionLikelihood)), 'uint8');
    offset = offset + uint32(2*2);

    % conditionPredictionLikelihood data
    nBytes = uint32(8 * size(bus.conditionPredictionLikelihood, 1) * size(bus.conditionPredictionLikelihood, 2));
    if nBytes > uint32(0)
        if(offset+uint32(nBytes-1) > numel(out)), return, end
        out(offset:(offset+uint32(nBytes-1))) = typecast(double(bus.conditionPredictionLikelihood(:))', 'uint8')';
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize variable-sized classifierInfo
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Check input size is valid
    assert(numel(bus.classifierInfo) <= 300, 'numel(bus.classifierInfo) exceeds max size of 300');    % classifierInfo bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);

    % classifierInfo signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(4);
    offset = offset + uint32(1);

    % classifierInfo name with prefix 
    if(offset+uint32(2+14 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(numel(namePrefixBytes) + 14), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(numel(namePrefixBytes) + 14-1))) = [namePrefixBytes, uint8('classifierInfo')];
    offset = offset + uint32(numel(namePrefixBytes) + 14);

    % classifierInfo units
    if(offset+uint32(2+4 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(4), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(4-1))) = uint8('char');
    offset = offset + uint32(4);

    % classifierInfo data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(8); % data type is char
    offset = offset + uint32(1);

    % classifierInfo dimensions
    if(offset > numel(out)), return, end
    if(offset+uint32(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);
    out(offset:(offset+uint32(2*1-1))) = typecast(uint16(numel(bus.classifierInfo)), 'uint8');
    offset = offset + uint32(2*1);

    % classifierInfo data
    nBytes = uint32(1 * numel(bus.classifierInfo));
    if nBytes > uint32(0)
        if(offset+uint32(nBytes-1) > numel(out)), return, end
        out(offset:(offset+uint32(nBytes-1))) = uint8(bus.classifierInfo(:));
    end
    offset = offset + nBytes; %#ok<NASGU>

    valid = uint8(1);
end