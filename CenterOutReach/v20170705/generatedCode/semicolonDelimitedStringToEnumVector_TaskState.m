function [enumVector, nValues, valid] = semicolonDelimitedStringToEnumVector_TaskState(str, enumVector)
%#codegen
% DO NOT EDIT: Auto-generated by 
%   BusSerialize.writeSemicolonDelimitedStringToEnumVectorCode('TaskState')

    valid = uint8(1);
    nValues = uint32(0);
    coder.varsize('token', 22);
    if nargin < 2
        maxValues = Inf; % for matlab use only
        enumVector = TaskState.empty(0, 1);
    else
        maxValues = numel(enumVector); % for simulink codegen use, required to avoid undetermined max size issue
    end

    counter = 1;
    idx1 = 1;
    while(idx1 <= numel(str))
        idx2 = idx1+1;
        while(idx2 <= numel(str))
            if str(idx2) == ';'
                break;
            end
            idx2 = idx2 + 1;
        end

    if idx2-idx1 > 22
        valid = uint8(0);
        return;
    end
    token = str(idx1:idx2-1);
        if isequal(uint8(token(:)), uint8('TaskPaused')')
            enumVector(counter) = TaskState.TaskPaused;
        elseif isequal(uint8(token(:)), uint8('StartTask')')
            enumVector(counter) = TaskState.StartTask;
        elseif isequal(uint8(token(:)), uint8('GetNewTrialParams')')
            enumVector(counter) = TaskState.GetNewTrialParams;
        elseif isequal(uint8(token(:)), uint8('InitTrial')')
            enumVector(counter) = TaskState.InitTrial;
        elseif isequal(uint8(token(:)), uint8('WaitCenterAcquire')')
            enumVector(counter) = TaskState.WaitCenterAcquire;
        elseif isequal(uint8(token(:)), uint8('WaitCenterSettle')')
            enumVector(counter) = TaskState.WaitCenterSettle;
        elseif isequal(uint8(token(:)), uint8('WaitCenterHold')')
            enumVector(counter) = TaskState.WaitCenterHold;
        elseif isequal(uint8(token(:)), uint8('DelayPeriod')')
            enumVector(counter) = TaskState.DelayPeriod;
        elseif isequal(uint8(token(:)), uint8('GoCueZeroDelay')')
            enumVector(counter) = TaskState.GoCueZeroDelay;
        elseif isequal(uint8(token(:)), uint8('GoCueNonZeroDelay')')
            enumVector(counter) = TaskState.GoCueNonZeroDelay;
        elseif isequal(uint8(token(:)), uint8('WaitMoveOnset')')
            enumVector(counter) = TaskState.WaitMoveOnset;
        elseif isequal(uint8(token(:)), uint8('WaitTargetAcquire')')
            enumVector(counter) = TaskState.WaitTargetAcquire;
        elseif isequal(uint8(token(:)), uint8('WaitTargetSettle')')
            enumVector(counter) = TaskState.WaitTargetSettle;
        elseif isequal(uint8(token(:)), uint8('WaitTargetHold')')
            enumVector(counter) = TaskState.WaitTargetHold;
        elseif isequal(uint8(token(:)), uint8('Success')')
            enumVector(counter) = TaskState.Success;
        elseif isequal(uint8(token(:)), uint8('ReachEnd')')
            enumVector(counter) = TaskState.ReachEnd;
        elseif isequal(uint8(token(:)), uint8('ITI')')
            enumVector(counter) = TaskState.ITI;
        elseif isequal(uint8(token(:)), uint8('FailureCenterAcquire')')
            enumVector(counter) = TaskState.FailureCenterAcquire;
        elseif isequal(uint8(token(:)), uint8('FailureCenterHold')')
            enumVector(counter) = TaskState.FailureCenterHold;
        elseif isequal(uint8(token(:)), uint8('FailureDelayMove')')
            enumVector(counter) = TaskState.FailureDelayMove;
        elseif isequal(uint8(token(:)), uint8('FailureRTTooFast')')
            enumVector(counter) = TaskState.FailureRTTooFast;
        elseif isequal(uint8(token(:)), uint8('FailureRTTooSlow')')
            enumVector(counter) = TaskState.FailureRTTooSlow;
        elseif isequal(uint8(token(:)), uint8('FailureTargetAcquire')')
            enumVector(counter) = TaskState.FailureTargetAcquire;
        elseif isequal(uint8(token(:)), uint8('FailureTargetHold')')
            enumVector(counter) = TaskState.FailureTargetHold;
        elseif isequal(uint8(token(:)), uint8('FailureLowPeakVelocity')')
            enumVector(counter) = TaskState.FailureLowPeakVelocity;
        elseif isequal(uint8(token(:)), uint8('FailureHandNotSeen')')
            enumVector(counter) = TaskState.FailureHandNotSeen;
        elseif isequal(uint8(token(:)), uint8('TaskPurgatory')')
            enumVector(counter) = TaskState.TaskPurgatory;
        else
            valid = uint8(0);
            return;
        end
        counter = counter + 1;
        if counter > maxValues
            nValues = uint32(counter - 1);
            return;
        end
        idx1 = idx2 + 1;
    end
    nValues = uint32(counter - 1);

end