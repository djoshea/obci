function [enumVector, nValues, valid] = semicolonDelimitedStringToEnumVector_DirectionName(str, enumVector)
%#codegen
% DO NOT EDIT: Auto-generated by 
%   BusSerialize.writeSemicolonDelimitedStringToEnumVectorCode('DirectionName')

    valid = uint8(1);
    nValues = uint32(0);
    coder.varsize('token', 9);
    if nargin < 2
        maxValues = Inf; % for matlab use only
        enumVector = DirectionName.empty(0, 1);
    else
        maxValues = numel(enumVector); % for simulink codegen use, required to avoid undetermined max size issue
    end

    counter = 1;
    idx1 = 1;
    while(idx1 <= numel(str))
        idx2 = idx1+1;
        while(idx2 <= numel(str))
            if str(idx2) == ';'
                break;
            end
            idx2 = idx2 + 1;
        end

    if idx2-idx1 > 9
        valid = uint8(0);
        return;
    end
    token = str(idx1:idx2-1);
        if isequal(uint8(token(:)), uint8('None')')
            enumVector(counter) = DirectionName.None;
        elseif isequal(uint8(token(:)), uint8('Right')')
            enumVector(counter) = DirectionName.Right;
        elseif isequal(uint8(token(:)), uint8('UpRight')')
            enumVector(counter) = DirectionName.UpRight;
        elseif isequal(uint8(token(:)), uint8('Up')')
            enumVector(counter) = DirectionName.Up;
        elseif isequal(uint8(token(:)), uint8('UpLeft')')
            enumVector(counter) = DirectionName.UpLeft;
        elseif isequal(uint8(token(:)), uint8('Left')')
            enumVector(counter) = DirectionName.Left;
        elseif isequal(uint8(token(:)), uint8('DownLeft')')
            enumVector(counter) = DirectionName.DownLeft;
        elseif isequal(uint8(token(:)), uint8('Down')')
            enumVector(counter) = DirectionName.Down;
        elseif isequal(uint8(token(:)), uint8('DownRight')')
            enumVector(counter) = DirectionName.DownRight;
        elseif isequal(uint8(token(:)), uint8('Center')')
            enumVector(counter) = DirectionName.Center;
        else
            valid = uint8(0);
            return;
        end
        counter = counter + 1;
        if counter > maxValues
            nValues = uint32(counter - 1);
            return;
        end
        idx1 = idx2 + 1;
    end
    nValues = uint32(counter - 1);

end