function [out, valid] = serializeBus_ScopeTimingBus(bus, namePrefix)
%#codegen
% DO NOT EDIT: Auto-generated by 
%   BusSerialize.writeSerializeBusCode('ScopeTimingBus')

    if nargin < 2, namePrefix = uint8(''); end
    namePrefixBytes = uint8(namePrefix(:))';
    valid = uint8(0);
    outSize = getSerializedBusLength_ScopeTimingBus(bus, namePrefix);
    assert(outSize <= 302 + 9*numel(namePrefix));
    out = zeros(outSize, 1, 'uint8');
    offset = uint32(1);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized startFrameGalvoAnalog
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Check input size is valid
    assert(numel(bus.startFrameGalvoAnalog) == 1, 'numel(bus.startFrameGalvoAnalog) must be 1');    % startFrameGalvoAnalog bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(2);
    offset = offset + uint32(1);

    % startFrameGalvoAnalog signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(5);
    offset = offset + uint32(1);

    % startFrameGalvoAnalog name with prefix 
    if(offset+uint32(2+21 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(numel(namePrefixBytes) + 21), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(numel(namePrefixBytes) + 21-1))) = [namePrefixBytes, uint8('startFrameGalvoAnalog')];
    offset = offset + uint32(numel(namePrefixBytes) + 21);

    % startFrameGalvoAnalog units
    if(offset+uint32(2+1 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(1), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(1-1))) = uint8('V');
    offset = offset + uint32(1);

    % startFrameGalvoAnalog data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(0); % data type is double
    offset = offset + uint32(1);

    % startFrameGalvoAnalog dimensions
    if(offset > numel(out)), return, end
    if(offset+uint32(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);
    out(offset:(offset+uint32(2*1-1))) = typecast(uint16(numel(bus.startFrameGalvoAnalog)), 'uint8');
    offset = offset + uint32(2*1);

    % startFrameGalvoAnalog data
    nBytes = uint32(8 * numel(bus.startFrameGalvoAnalog));
    if nBytes > uint32(0)
        if(offset+uint32(nBytes-1) > numel(out)), return, end
        out(offset:(offset+uint32(nBytes-1))) = typecast(double(bus.startFrameGalvoAnalog(:))', 'uint8')';
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized endFrameGalvoAnalog
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Check input size is valid
    assert(numel(bus.endFrameGalvoAnalog) == 1, 'numel(bus.endFrameGalvoAnalog) must be 1');    % endFrameGalvoAnalog bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(2);
    offset = offset + uint32(1);

    % endFrameGalvoAnalog signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(5);
    offset = offset + uint32(1);

    % endFrameGalvoAnalog name with prefix 
    if(offset+uint32(2+19 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(numel(namePrefixBytes) + 19), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(numel(namePrefixBytes) + 19-1))) = [namePrefixBytes, uint8('endFrameGalvoAnalog')];
    offset = offset + uint32(numel(namePrefixBytes) + 19);

    % endFrameGalvoAnalog units
    if(offset+uint32(2+1 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(1), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(1-1))) = uint8('V');
    offset = offset + uint32(1);

    % endFrameGalvoAnalog data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(0); % data type is double
    offset = offset + uint32(1);

    % endFrameGalvoAnalog dimensions
    if(offset > numel(out)), return, end
    if(offset+uint32(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);
    out(offset:(offset+uint32(2*1-1))) = typecast(uint16(numel(bus.endFrameGalvoAnalog)), 'uint8');
    offset = offset + uint32(2*1);

    % endFrameGalvoAnalog data
    nBytes = uint32(8 * numel(bus.endFrameGalvoAnalog));
    if nBytes > uint32(0)
        if(offset+uint32(nBytes-1) > numel(out)), return, end
        out(offset:(offset+uint32(nBytes-1))) = typecast(double(bus.endFrameGalvoAnalog(:))', 'uint8')';
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized startFrameResonantAnalog
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Check input size is valid
    assert(numel(bus.startFrameResonantAnalog) == 1, 'numel(bus.startFrameResonantAnalog) must be 1');    % startFrameResonantAnalog bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(2);
    offset = offset + uint32(1);

    % startFrameResonantAnalog signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(5);
    offset = offset + uint32(1);

    % startFrameResonantAnalog name with prefix 
    if(offset+uint32(2+24 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(numel(namePrefixBytes) + 24), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(numel(namePrefixBytes) + 24-1))) = [namePrefixBytes, uint8('startFrameResonantAnalog')];
    offset = offset + uint32(numel(namePrefixBytes) + 24);

    % startFrameResonantAnalog units
    if(offset+uint32(2+1 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(1), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(1-1))) = uint8('V');
    offset = offset + uint32(1);

    % startFrameResonantAnalog data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(0); % data type is double
    offset = offset + uint32(1);

    % startFrameResonantAnalog dimensions
    if(offset > numel(out)), return, end
    if(offset+uint32(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);
    out(offset:(offset+uint32(2*1-1))) = typecast(uint16(numel(bus.startFrameResonantAnalog)), 'uint8');
    offset = offset + uint32(2*1);

    % startFrameResonantAnalog data
    nBytes = uint32(8 * numel(bus.startFrameResonantAnalog));
    if nBytes > uint32(0)
        if(offset+uint32(nBytes-1) > numel(out)), return, end
        out(offset:(offset+uint32(nBytes-1))) = typecast(double(bus.startFrameResonantAnalog(:))', 'uint8')';
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized endFrameResonantAnalog
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Check input size is valid
    assert(numel(bus.endFrameResonantAnalog) == 1, 'numel(bus.endFrameResonantAnalog) must be 1');    % endFrameResonantAnalog bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(2);
    offset = offset + uint32(1);

    % endFrameResonantAnalog signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(5);
    offset = offset + uint32(1);

    % endFrameResonantAnalog name with prefix 
    if(offset+uint32(2+22 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(numel(namePrefixBytes) + 22), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(numel(namePrefixBytes) + 22-1))) = [namePrefixBytes, uint8('endFrameResonantAnalog')];
    offset = offset + uint32(numel(namePrefixBytes) + 22);

    % endFrameResonantAnalog units
    if(offset+uint32(2+1 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(1), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(1-1))) = uint8('V');
    offset = offset + uint32(1);

    % endFrameResonantAnalog data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(0); % data type is double
    offset = offset + uint32(1);

    % endFrameResonantAnalog dimensions
    if(offset > numel(out)), return, end
    if(offset+uint32(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);
    out(offset:(offset+uint32(2*1-1))) = typecast(uint16(numel(bus.endFrameResonantAnalog)), 'uint8');
    offset = offset + uint32(2*1);

    % endFrameResonantAnalog data
    nBytes = uint32(8 * numel(bus.endFrameResonantAnalog));
    if nBytes > uint32(0)
        if(offset+uint32(nBytes-1) > numel(out)), return, end
        out(offset:(offset+uint32(nBytes-1))) = typecast(double(bus.endFrameResonantAnalog(:))', 'uint8')';
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized cameraFrameEndAnalog
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Check input size is valid
    assert(numel(bus.cameraFrameEndAnalog) == 1, 'numel(bus.cameraFrameEndAnalog) must be 1');    % cameraFrameEndAnalog bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(2);
    offset = offset + uint32(1);

    % cameraFrameEndAnalog signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(5);
    offset = offset + uint32(1);

    % cameraFrameEndAnalog name with prefix 
    if(offset+uint32(2+20 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(numel(namePrefixBytes) + 20), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(numel(namePrefixBytes) + 20-1))) = [namePrefixBytes, uint8('cameraFrameEndAnalog')];
    offset = offset + uint32(numel(namePrefixBytes) + 20);

    % cameraFrameEndAnalog units
    if(offset+uint32(2+1 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(1), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(1-1))) = uint8('V');
    offset = offset + uint32(1);

    % cameraFrameEndAnalog data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(0); % data type is double
    offset = offset + uint32(1);

    % cameraFrameEndAnalog dimensions
    if(offset > numel(out)), return, end
    if(offset+uint32(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);
    out(offset:(offset+uint32(2*1-1))) = typecast(uint16(numel(bus.cameraFrameEndAnalog)), 'uint8');
    offset = offset + uint32(2*1);

    % cameraFrameEndAnalog data
    nBytes = uint32(8 * numel(bus.cameraFrameEndAnalog));
    if nBytes > uint32(0)
        if(offset+uint32(nBytes-1) > numel(out)), return, end
        out(offset:(offset+uint32(nBytes-1))) = typecast(double(bus.cameraFrameEndAnalog(:))', 'uint8')';
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized cameraFrameEnd
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Check input size is valid
    assert(numel(bus.cameraFrameEnd) == 1, 'numel(bus.cameraFrameEnd) must be 1');    % cameraFrameEnd bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(2);
    offset = offset + uint32(1);

    % cameraFrameEnd signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(5);
    offset = offset + uint32(1);

    % cameraFrameEnd name with prefix 
    if(offset+uint32(2+14 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(numel(namePrefixBytes) + 14), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(numel(namePrefixBytes) + 14-1))) = [namePrefixBytes, uint8('cameraFrameEnd')];
    offset = offset + uint32(numel(namePrefixBytes) + 14);

    % cameraFrameEnd units
    if(offset+uint32(2+0 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(0), 'uint8');
    offset = offset + uint32(2);

    % cameraFrameEnd data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(3); % data type is uint8
    offset = offset + uint32(1);

    % cameraFrameEnd dimensions
    if(offset > numel(out)), return, end
    if(offset+uint32(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);
    out(offset:(offset+uint32(2*1-1))) = typecast(uint16(numel(bus.cameraFrameEnd)), 'uint8');
    offset = offset + uint32(2*1);

    % cameraFrameEnd data
    nBytes = uint32(1 * numel(bus.cameraFrameEnd));
    if nBytes > uint32(0)
        if(offset+uint32(nBytes-1) > numel(out)), return, end
        out(offset:(offset+uint32(nBytes-1))) = uint8(bus.cameraFrameEnd(:));
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized cameraFrameExposure
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Check input size is valid
    assert(numel(bus.cameraFrameExposure) == 1, 'numel(bus.cameraFrameExposure) must be 1');    % cameraFrameExposure bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(2);
    offset = offset + uint32(1);

    % cameraFrameExposure signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(5);
    offset = offset + uint32(1);

    % cameraFrameExposure name with prefix 
    if(offset+uint32(2+19 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(numel(namePrefixBytes) + 19), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(numel(namePrefixBytes) + 19-1))) = [namePrefixBytes, uint8('cameraFrameExposure')];
    offset = offset + uint32(numel(namePrefixBytes) + 19);

    % cameraFrameExposure units
    if(offset+uint32(2+0 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(0), 'uint8');
    offset = offset + uint32(2);

    % cameraFrameExposure data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(3); % data type is uint8
    offset = offset + uint32(1);

    % cameraFrameExposure dimensions
    if(offset > numel(out)), return, end
    if(offset+uint32(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);
    out(offset:(offset+uint32(2*1-1))) = typecast(uint16(numel(bus.cameraFrameExposure)), 'uint8');
    offset = offset + uint32(2*1);

    % cameraFrameExposure data
    nBytes = uint32(1 * numel(bus.cameraFrameExposure));
    if nBytes > uint32(0)
        if(offset+uint32(nBytes-1) > numel(out)), return, end
        out(offset:(offset+uint32(nBytes-1))) = uint8(bus.cameraFrameExposure(:));
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized led470Active
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Check input size is valid
    assert(numel(bus.led470Active) == 1, 'numel(bus.led470Active) must be 1');    % led470Active bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(2);
    offset = offset + uint32(1);

    % led470Active signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(5);
    offset = offset + uint32(1);

    % led470Active name with prefix 
    if(offset+uint32(2+12 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(numel(namePrefixBytes) + 12), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(numel(namePrefixBytes) + 12-1))) = [namePrefixBytes, uint8('led470Active')];
    offset = offset + uint32(numel(namePrefixBytes) + 12);

    % led470Active units
    if(offset+uint32(2+0 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(0), 'uint8');
    offset = offset + uint32(2);

    % led470Active data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(3); % data type is uint8
    offset = offset + uint32(1);

    % led470Active dimensions
    if(offset > numel(out)), return, end
    if(offset+uint32(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);
    out(offset:(offset+uint32(2*1-1))) = typecast(uint16(numel(bus.led470Active)), 'uint8');
    offset = offset + uint32(2*1);

    % led470Active data
    nBytes = uint32(1 * numel(bus.led470Active));
    if nBytes > uint32(0)
        if(offset+uint32(nBytes-1) > numel(out)), return, end
        out(offset:(offset+uint32(nBytes-1))) = uint8(bus.led470Active(:));
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized led405Active
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Check input size is valid
    assert(numel(bus.led405Active) == 1, 'numel(bus.led405Active) must be 1');    % led405Active bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(2);
    offset = offset + uint32(1);

    % led405Active signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(5);
    offset = offset + uint32(1);

    % led405Active name with prefix 
    if(offset+uint32(2+12 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(numel(namePrefixBytes) + 12), 'uint8');
    offset = offset + uint32(2);
    out(offset:(offset+uint32(numel(namePrefixBytes) + 12-1))) = [namePrefixBytes, uint8('led405Active')];
    offset = offset + uint32(numel(namePrefixBytes) + 12);

    % led405Active units
    if(offset+uint32(2+0 -1) > numel(out)), return, end
    out(offset:(offset+uint32(1))) = typecast(uint16(0), 'uint8');
    offset = offset + uint32(2);

    % led405Active data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(3); % data type is uint8
    offset = offset + uint32(1);

    % led405Active dimensions
    if(offset > numel(out)), return, end
    if(offset+uint32(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint32(1);
    out(offset:(offset+uint32(2*1-1))) = typecast(uint16(numel(bus.led405Active)), 'uint8');
    offset = offset + uint32(2*1);

    % led405Active data
    nBytes = uint32(1 * numel(bus.led405Active));
    if nBytes > uint32(0)
        if(offset+uint32(nBytes-1) > numel(out)), return, end
        out(offset:(offset+uint32(nBytes-1))) = uint8(bus.led405Active(:));
    end
    offset = offset + nBytes; %#ok<NASGU>

    valid = uint8(1);
end